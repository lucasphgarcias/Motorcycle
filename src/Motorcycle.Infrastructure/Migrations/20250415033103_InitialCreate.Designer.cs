// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motorcycle.Infrastructure.Data.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Motorcycle.Infrastructure.Migrations
{
    [DbContext(typeof(MotorcycleDbContext))]
    [Migration("20250415033103_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Motorcycle.Domain.Entities.DeliveryPersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPersons", (string)null);
                });

            modelBuilder.Entity("Motorcycle.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Motorcycles", (string)null);
                });

            modelBuilder.Entity("Motorcycle.Domain.Entities.RentalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeliveryPersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPersonId");

                    b.HasIndex("MotorcycleId");

                    b.ToTable("Rentals", (string)null);
                });

            modelBuilder.Entity("Motorcycle.Infrastructure.Data.Entities.Motorcycle2024Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NotificationTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Motorcycle2024Notifications", (string)null);
                });

            modelBuilder.Entity("Motorcycle.Domain.Entities.DeliveryPersonEntity", b =>
                {
                    b.OwnsOne("Motorcycle.Domain.ValueObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("DeliveryPersonEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(18)
                                .HasColumnType("character varying(18)")
                                .HasColumnName("Cnpj");

                            b1.HasKey("DeliveryPersonEntityId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("DeliveryPersons");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryPersonEntityId");
                        });

                    b.OwnsOne("Motorcycle.Domain.ValueObjects.DriverLicense", "DriverLicense", b1 =>
                        {
                            b1.Property<Guid>("DeliveryPersonEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ImagePath")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("LicenseImagePath");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("LicenseNumber");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("LicenseType");

                            b1.HasKey("DeliveryPersonEntityId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("DeliveryPersons");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryPersonEntityId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("DriverLicense")
                        .IsRequired();
                });

            modelBuilder.Entity("Motorcycle.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.OwnsOne("Motorcycle.Domain.ValueObjects.LicensePlate", "LicensePlate", b1 =>
                        {
                            b1.Property<Guid>("MotorcycleEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("LicensePlate");

                            b1.HasKey("MotorcycleEntityId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Motorcycles");

                            b1.WithOwner()
                                .HasForeignKey("MotorcycleEntityId");
                        });

                    b.Navigation("LicensePlate")
                        .IsRequired();
                });

            modelBuilder.Entity("Motorcycle.Domain.Entities.RentalEntity", b =>
                {
                    b.HasOne("Motorcycle.Domain.Entities.DeliveryPersonEntity", "DeliveryPerson")
                        .WithMany("Rentals")
                        .HasForeignKey("DeliveryPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Motorcycle.Domain.Entities.MotorcycleEntity", "Motorcycle")
                        .WithMany("Rentals")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Motorcycle.Domain.ValueObjects.Money", "DailyRate", b1 =>
                        {
                            b1.Property<Guid>("RentalEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DailyRate");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("RentalEntityId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalEntityId");
                        });

                    b.OwnsOne("Motorcycle.Domain.ValueObjects.Money", "TotalAmount", b1 =>
                        {
                            b1.Property<Guid>("RentalEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("TotalAmountCurrency");

                            b1.HasKey("RentalEntityId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalEntityId");
                        });

                    b.OwnsOne("Motorcycle.Domain.ValueObjects.RentalPeriod", "Period", b1 =>
                        {
                            b1.Property<Guid>("RentalEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateOnly?>("ActualEndDate")
                                .HasColumnType("date")
                                .HasColumnName("ActualEndDate");

                            b1.Property<DateOnly>("ExpectedEndDate")
                                .HasColumnType("date")
                                .HasColumnName("ExpectedEndDate");

                            b1.Property<int>("PlanType")
                                .HasColumnType("integer")
                                .HasColumnName("PlanType");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.HasKey("RentalEntityId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalEntityId");
                        });

                    b.Navigation("DailyRate")
                        .IsRequired();

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Motorcycle");

                    b.Navigation("Period")
                        .IsRequired();

                    b.Navigation("TotalAmount");
                });

            modelBuilder.Entity("Motorcycle.Domain.Entities.DeliveryPersonEntity", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Motorcycle.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
